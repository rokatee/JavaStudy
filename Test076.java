/*
■■■ 클래스와 인스턴스 ■■■ 
	- 생성자(Constructor)
*/



public class Test076
{
	int x;
	
	// 생성자의 이름은 항상 예외없이 클래스의 이름과 동일해야 하며
	// 필요한 경우 인수를 받아들이는 것도 가능하고
	// 같은 이름이 메소드를 정의하는 중복정의가 가능하지만
	// 리턴값(반환값)은 가질 수 없다

	// 생성자는 다른 일반 메소드처럼 호출될 수 없고
	// new 연산자를 이용하여 객체를 생성하기 위해 호출되며
	// 각 클래스의 인스턴스인 객체를 생성한 후에
	// 생성된 객체의 멤버를 초기화 시키는 작업을 수행하게 된다

	// 오버로딩의 경우 새로운 메소드를 정의하는 것
	//	1. 매개변수 타입 또는 개수나 순서가 달라야함
	//	2. 그러므로 메서드 이름이 동일해도 됨
	Test076()
	{
		// 생성자 내부에서 다른 생성자를 호출하는 건 가능하다
		// 하지만, 생성자 내부에 호출된 다른 생성자가 가장 먼저 실행되어야 한다
		// → 기존 생성자의 값이 덮어지지 않기 위해 호출된 생성자가 위에서 먼저 실행되어야 한다
		
		// 생성자 내부에서 또다른 생성자를 호출하는 구문
		//Test076(100);	// 이런식으로 호출 불가능
		this(100);		// this는 class Test076이고 Test076(100)은 결국 아래의 Test076(int x) 메소드를 부르는 것이다.
		x = 10;

		System.out.println("인자 없는 생성자");
		System.out.println("Test076이 갖고있는 x : " + this.x);
		System.out.println("Test076이 갖고있는 x : " + x);
	}

	//Test076(int num)
	//{
	//	x = num;
	//	System.out.println("인자가 하나인 생성자");
	//}
	
	Test076(int x)
	{
		//x = x;			// 둘 다 지역변수 이므로 안 됨
		//Test076.x = x;	// 이렇게 Test076의 전역변수 x를 가져오려면 
		this.x = x;			// this 키워드를 사용해야함 → 전역변수 = 지역변수(이면서 매개변수)
							// (Test076.x 와 같은 문법은 다른 곳에서 이미 쓰이기 때문)
		System.out.println("인자가 하나인 생성자");
		System.out.println("Test076이 갖고있는 x : " + this.x);
	}

	public static void main(String[] args)
	{
		// Test076 클래스 기반 인스턴스 생성
		Test076 ob1 = new Test076();
		Test076 ob2 = new Test076(100);
	}
}

/*
실행 결과

인자가 하나인 생성자			// line 33에 의해 53가 출력된 것	
Test076이 갖고있는 x : 100		// line 33에 의해 54가 출력된 것
인자 없는 생성자				// line 34에 의해 36이 출력된 것
Test076이 갖고있는 x : 10		// line 34에 의해 37이 출력된 것
Test076이 갖고있는 x : 10		// line 34에 의해 38이 출력된 것
인자가 하나인 생성자			// line 52에 의해 54가 출력된 것	
Test076이 갖고있는 x : 100		// line 52에 의해 55가 출력된 것
*/